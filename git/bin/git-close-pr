#!/usr/bin/env zsh
#
# Close a pull request.
# Note that this depends on hub and my git-nuke and ci-wait scripts.
# You can actually remove the git-nuke step, I just like to keep things tidy.
#
# Naturally, the script assumes you have PR open in the current branch.
#
# The script uses our current workflow at Avenue:
# 1. Fetch and rebase off our remote
# 2. Perform an interactive rebase of main (or equivalent)
# 3. Squash everything
# 4. Force push to our remote (history has been overridden in the squash)
# 5. Merge to main
# 6. Delete local and remote branches
#
# The script will halt if conflicts are found during the interactive rebase.
# At that point it is recommended for you to solve the conflicts manually and
# then run `git rebase --continue` followed by `git-close-pr --continue`
#
# Usage:
# $ git-close-pr
# Closes a PR from the current branch to main
#
# $ git-close-pr dev
# Closes a PR from the current branch to the dev branch
#
# $ git-close-pr --continue
# Same as `git-close-pr` but continues after the interactive rebase.
# Useful if there were conflicts.
# Should be run after solving them and running `git rebase --continue`
#
# $ git-close-pr dev --continue
# Same as git-close-pr --continue but destination branch is dev

git_prefix="[git]:" # i like pretty things but you can just remove this
branch=$(git rev-parse --abbrev-ref HEAD)
destination=${1:-main}

if [[ $# -eq 2 ]]; then
  flag=$2
elif [[ $# -eq 1 ]] && [[ $1 == "--continue" ]]; then
  flag=$1
  destination="main"
fi

_echo() {
  echo -e "$git_prefix $@"
}

_git_fetch() {
  _echo "fetching..."
  git fetch origin $destination
}

_git_rebase_all() {
  _echo "rebasing $destination..."
  git checkout $destination || exit "couldn't checkout $destination"
  git rebase

  _echo "rebasing $branch"
  git checkout $branch
  git rebase -i origin/$destination
}

_git_rebase_failed() {
  echo ""
  _echo "\
can't rebase. please resolve the following conflicts, \
finish the rebase manually \
and run again with the --continue flag:"

  git diff --name-only --diff-filter=U
}

_git_force_push() {
  _echo "force pushing..."
  git push -f
}

_git_wait_for_ci() {
  _echo "waiting for ci to start..."
  sleep 3 # sometimes the ci takes a while to start
  ci-wait || exit 1 # see bin/ci-wait
}

_git_merge() {
  _echo "merging..."
  git checkout $destination
  git merge $branch
  git push
}

_git_cleanup(){
  _echo "cleaning up..."
  git push origin :$branch
  git branch -d $branch
  git nuke # you can remove this if you want, otherwise see bin/git-nuke
}

# decide whether to continue to close a pr
# (useful if there were conflicts before)
# or start from scratch
if [[ -z $flag ]]; then
  # start from scratch
  _git_fetch
  _git_rebase_all

  # uh-oh, conflicts
  if [ $? -gt 0 ]; then
    _git_rebase_failed
    exit 1 # halt everything and let us handle this manually
  fi
 else
   # no more conflicts, cool
   _echo "continuing..."
fi

# if we got this far there is no turning back
# no more conflicts or anything like that
# so if a command fails, let's stop everything in its tracks
set -e

_git_force_push
_git_wait_for_ci
_git_merge
_git_cleanup
