#!/bin/zsh

GREEN='\033[1;32m'
BLUE='\033[1;34m'
RED='\033[1;91m'
RESET='\033[0m'

WD=$(pwd)

DEV_DOTFILES=~/Developer/frm/dotfiles
MAC_OS_MOJAVE_HEADERS=/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg

function pp {
  echo -e "\n$1[$2]: $3${RESET}"
}

function pp_info {
  pp $BLUE $1 $2
}

function pp_success {
  pp $GREEN $1 $2
}

function pp_error {
  pp $RED $1 $2
}

function dirlink {
  (cd $HOME && ln -s "$WD/$1" "$2")
}

pp_info "install" "setting up Developer directory"
mkdir -p ~/Developer/frm
git clone --recurse-submodules -j8 https://github.com/frm/dotfiles.git $DEV_DOTFILES

cd $DEV_DOTFILES

pp_info "install" "installing brew"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

pp_info "brew" "bundling apps"
brew bundle

pp_info "macos" "installing command line tools"
xcode-select --install

MAC_OS_VERSION=$(sw_vers -productVersion)

if [[ $MAC_OS_VERSION =~ "10.14" ]]; then
  pp_info "macos" "installing macos mojave headers"

  if [ ! -f $MAC_OS_MOJAVE_HEADERS ]; then
    pp_error "macos" "failed installing Mojave SDK headers"
    pp_error "macos" "please download them from https://developer.apple.com/download/more/?q=Command%20Line%20Tools"
    exit 1
  else
    sudo installer -pkg $MAC_OS_MOJAVE_HEADERS -target /
  fi
else
  pp_info "macos" "not using mojave, skipping headers"
fi

pp_info "macos" "accepting developer license"
sudo xcodebuild -license accept

pp_info "macos" "setting up system configs"
read_hostname=$(pp $RESET "macos" "enter your desired hostname (default: da3mon) ")
read -r "hostname?$read_hostname"
hostname=${hostname:-da3mon}

./macos/setup "$hostname"

pp_info "install" "checking if gnu ln is available"
if which gln > /dev/null; then
  pp_info "install" "found gln, using it"
else
  pp_error "install" "gnu ln not found"
  pp_error "install" "can't create symlinks without gln"
  pp_error "install" "please install coreutils and try again"

  exit 1
fi

pp_info "brew" "installing mpv"
brew cask install mpv

pp_info "mpv" "setting up config"
mkdir -p ~/.config/mpv
gln -srf mpv/mpv.conf.symlink ~/.config/mpv/mpv.conf
gln -srf mpv/input.conf.symlink ~/.config/mpv/input.conf

pp_info "asdf" "setting up environment"
gln -srf asdf/asdfrc.symlink ~/.asdfrc

read -r "asdf_version?$(pp $RESET "asdf" "asdf version to install? (default: 0.7.8)") "
asdf_version=${asdf_version:-0.7.8}

pp_info "asdf" "installing asdf $asdf_version"
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v$asdf_version

pp_info "asdf" "resourcing environment"
source ~/.asdf/asdf.sh

pp_info "asdf" "adding plugins"
asdf plugin-add elixir
asdf plugin-add erlang
asdf plugin-add ruby
asdf plugin-add rust
asdf plugin-add python
asdf plugin-add nodejs
asdf plugin-add crystal
asdf plugin-add golang

pp_info "asdf" "importing nodejs release team keyring"
bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring

asdf_check=$(pp $RESET "asdf" "check if the asdf/tool-versions.symlink file contains the desired language versions and press ENTER when ready ")
read -r "_unused?$asdf_check"

gln -srf asdf/tool-versions.symlink ~/.tool-versions
(cd $HOME && asdf install)

source $HOME/.asdf/shims

pp_info "elixir" "setting up iex"
gln -srf elixir/iex.exs.symlink ~/.iex.exs

pp_info "ruby" "installing gems"
gem install bundler
cat ruby/default-gems | xargs gem install

pp_info "node" "installing packages"
npm install -g node

pp_info "python" "upgrading pip"
pip install --upgrade pip

pp_info "python" "installing packages"
pip install -r python/requirements.txt

pp_info "zsh" "replacing system zsh with brew version"
sudo sh -c "echo $(which zsh) >> /etc/shells"
chsh -s $(which zsh)

pp_info "zsh" "setting up environment"
dirlink . ~/.dotfiles
cp ./system/env.init ./system/global_env.init

pp_info "zsh" "replacing current zshrc"
if [ -f ~/.zshrc ]; then
  rm ~/.zshrc
fi

gln -srf zsh/zshrc.symlink ~/.zshrc

pp_info "zsh" "installing geometry"
GEOMETRY=~/Developer/geometry

mkdir -p $GEOMETRY
git clone https://github.com/geometry-zsh/geometry.git $GEOMETRY/development

# we must redownload due to symlinks breaking
git clone https://github.com/geometry-zsh/geometry.git $GEOMETRY/production

pp_info "tmux" "installing plugins"
mkdir -p ~/.tmux/plugins/
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
gln -srf ./tmux/tmux.conf.symlink "$HOME/.tmux.conf"
gln -srf ./tmux/tmate.conf.symlink "$HOME/.tmate.conf"
~/.tmux/plugins/tpm/bin/install_plugins

pp_info "git" "setting up environment"
gln -srf git/gitconfig.symlink ~/.gitconfig
gln -srf git/gitignore_global.symlink ~/.gitignore_global
gln -srf git/gitattributes.symlink ~/.gitattributes
dirlink git/git_template ~/.git_template

pp_info "gnupg" "setting up gpg config"
mkdir -p ~/.gnupg
gln -srf gnupg/gpg-agent.conf.symlink ~/.gnupg/gpg-agent.conf

pp_info "nvim" "setting up environment"
mkdir ~/.config
dirlink nvim ~/.config/

pp_info "nvim" "installing system python 2.7 for compatibility purposes"
brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/86a44a0a552c673a05f11018459c9f5faae3becc/Formula/python@2.rb

pp_info "nvim" "installing language libs"
/usr/local/bin/pip2 install neovim
pip install neovim
gem install neovim
yarn global add neovim

pp_info "nvim" "installing vim-plug"
git clone --depth 1 https://github.com/wbthomason/packer.nvim\
   ~/.local/share/nvim/site/pack/packer/start/packer.nvim

pp_info "nvim" "installing remaining plugins"
nvim -u nvim/rc/plugins.vim +PlugInstall +qall

pp_info "nvim" "updating remote plugins"
nvim +UpdateRemotePlugins +qall

pp_info "nvim" "fixing C-h bug"
$DEV_DOTFILES/scripts/fix-nvim-c-h

pp_info "ctags" "installing elixir ctags"
wget https://raw.githubusercontent.com/mmorearty/elixir-ctags/master/.ctags -q -O ctags/elixir.ctags

pp_info "ctags" "setting up ctags environment"
dirlink ctags ~/.ctags.d

# pp_info "alacritty" "setting up environment"
# dirlink alacritty ~/.config

# pp_info "alacritty" "installing from source"
# ./alacritty/source_install

pp_info "bat" "installing custom theme"
mkdir -p "$(bat --config-dir)/themes/tranquility"
mkdir -p "$(bat --cache-dir)"
gln -sfr bat/tranquility.tmTheme "$(bat --config-dir)/themes/tranquility"
gln -sfr bat/tranquility_eighties.tmTheme "$(bat --config-dir)/themes/tranquility"

bat cache --build

# pp_info "iterm2" "installing dracula"
# DRACULA_PATH=$DOTFILES/iterm2/colors/Dracula.itermcolors
# curl -o $DRACULA_PATH https://raw.githubusercontent.com/dracula/iterm/master/Dracula.itermcolors
# chmod +x $DRACULA_PATH

pp_info "iterm2" "installing fira code"

cd ~/Downloads
mkdir fonts
cd fonts

font_types="Light Retina Regular Medium Bold"

for type in $font_types; do
  wget -O "FiraCode $type Nerd Font Complete Mono.ttf" "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/FiraCode/$type/complete/Fira%20Code%20$type%20Nerd%20Font%20Complete%20Mono.ttf?raw=true"

  wget -O "FiraCode $type Nerd Font Complete.ttf" "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/FiraCode/$type/complete/Fira%20Code%20$type%20Nerd%20Font%20Complete.ttf?raw=true"
done

mv ./*.ttf ~/Library/Fonts/
cd $WD

pp_success "install" "automatic config done!"
pp_success "install" "you now need to config iterm2"
pp_success "install" "to do that, open preferences and do the following steps:
             1. in the general pane, select 'Load preferences from custom folder' and enter $DEV_DOTFILES/iterm2
             2. in the same pane, select 'Save changes to folder when iterm2 quits'
             3. restart iterm2"
