#!/bin/zsh

GREEN='\033[1;32m'
BLUE='\033[1;34m'
RED='\033[1;91m'
RESET='\033[0m'

WD=$(pwd)

DEV_DOTFILES=~/Developer/frm/dotfiles
MAC_OS_MOJAVE_HEADERS=/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg

function pp {
  echo -e "\n$1[$2]: $3${RESET}"
}

function pp_info {
  pp $BLUE $1 $2
}

function pp_success {
  pp $GREEN $1 $2
}

function pp_error {
  pp $RED $1 $2
}

function dirlink {
  (cd $HOME && ln -s "$WD/$1" "$2")
}

pp_info "install" "setting up Developer directory"
mkdir -p ~/Developer/frm
git clone --recurse-submodules -j8 https://github.com/frm/dotfiles.git $DEV_DOTFILES

cd $DEV_DOTFILES

pp_info "install" "installing brew"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

PATH="/opt/homebrew/bin:$PATH"

pp_info "brew" "bundling apps"
brew bundle

pp_info "macos" "installing command line tools"
xcode-select --install

MAC_OS_VERSION=$(sw_vers -productVersion)

if [[ $MAC_OS_VERSION =~ "10.14" ]]; then
  pp_info "macos" "installing macos mojave headers"

  if [ ! -f $MAC_OS_MOJAVE_HEADERS ]; then
    pp_error "macos" "failed installing Mojave SDK headers"
    pp_error "macos" "please download them from https://developer.apple.com/download/more/?q=Command%20Line%20Tools"
    exit 1
  else
    sudo installer -pkg $MAC_OS_MOJAVE_HEADERS -target /
  fi
else
  pp_info "macos" "not using mojave, skipping headers"
fi

pp_info "macos" "setting up system configs"
read_hostname=$(pp $RESET "macos" "enter your desired hostname (default: da3mon) ")
read -r "hostname?$read_hostname"
hostname=${hostname:-da3mon}

./macos/setup "$hostname"

pp_info "install" "checking if gnu ln is available"
if which gln > /dev/null; then
  pp_info "install" "found gln, using it"
else
  pp_error "install" "gnu ln not found"
  pp_error "install" "can't create symlinks without gln"
  pp_error "install" "please install coreutils and try again"

  exit 1
fi

pp_info "asdf" "setting up environment"
gln -srf asdf/asdfrc.symlink ~/.asdfrc

pp_info "asdf" "adding plugins"
asdf plugin add elixir
asdf plugin add erlang
asdf plugin add ruby
asdf plugin add rust
asdf plugin add python
asdf plugin add nodejs
asdf plugin add crystal
asdf plugin add golang
asdf plugin add postgres
asdf plugin add kubectl
asdf plugin add flutter
asdf plugin add cocoapods

asdf_check=$(pp $RESET "asdf" "check if the asdf/tool-versions.symlink file contains the desired language versions and press ENTER when ready ")
read -r "_unused?$asdf_check"

gln -srf asdf/tool-versions.symlink ~/.tool-versions

# Ensure postgres is configured
export POSTGRES_EXTRA_CONFIGURE_OPTIONS="
  --with-lz4
  --with-uuid=e2fs
  --with-libraries=/usr/local/lib:$(brew --prefix openssl@3)/lib
  --with-includes=/usr/local/include:$(brew --prefix openssl@3)/include"

brew install icu4c
brew link icu4c --force

asdf install

source asdf/asdf.init

pp_info "elixir" "setting up iex"
gln -srf elixir/iex.exs.symlink ~/.iex.exs

pp_info "ruby" "installing bundler"
gem install bundler
gem update --system

pp_info "ruby" "installing gems"
cat ruby/default-gems | xargs gem install

pp_info "node" "upgrading npm"
npm i -g npm@latest

pp_info "node" "installing packages"
cat node/default-npm-packages | xargs npm i -g

pp_info "python" "upgrading pip"
pip install --upgrade pip

pp_info "python" "installing packages"
pip install -r python/requirements.txt

pp_info "zsh" "replacing system zsh with brew version"
sudo sh -c "echo $(which zsh) >> /etc/shells"
chsh -s $(which zsh)

pp_info "zsh" "setting up environment"
dirlink . ~/.dotfiles
cp ./system/secrets.init.sample ./system/secrets.init

pp_info "zsh" "replacing current zshrc"
if [ -f ~/.zshrc ]; then
  rm ~/.zshrc
fi

gln -srf zsh/zshrc.symlink ~/.zshrc
source $HOME/.dotfiles/system/env.init

pp_info "zsh" "setting up themes"
mkdir -p ~/.config/fsh

for variant in frappe latte macchiato mocha; do
  wget -O "$DOTFILES/zsh/themes/catppuccin-$variant.ini" "https://raw.githubusercontent.com/catppuccin/zsh-fsh/main/themes/catppuccin-$variant.ini"

  gln -srf "$DOTFILES/zsh/themes/catppuccin-$variant.ini" "$HOME/.config/fsh/catppuccin-$variant.ini"
done

fast-theme XDG:catppuccin-$CATPPUCCIN_VARIANT

pp_info "tmux" "installing plugins"
mkdir -p ~/.tmux/plugins/
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
gln -srf ./tmux/tmux.conf.symlink "$HOME/.tmux.conf"
gln -srf ./tmux/tmate.conf.symlink "$HOME/.tmate.conf"
~/.tmux/plugins/tpm/bin/install_plugins

pp_info "tmux" "installing catppuccin"
mkdir -p $HOME/.config/tmux/plugins/catppuccin
git clone -b v2.1.3 https://github.com/catppuccin/tmux.git ~/.config/tmux/plugins/catppuccin/tmux

pp_info "git" "setting up environment"
gln -srf git/gitconfig.symlink ~/.gitconfig
gln -srf git/gitignore_global.symlink ~/.gitignore_global
gln -srf git/gitattributes.symlink ~/.gitattributes
dirlink git/git_template ~/.git_template

pp_info "gnupg" "setting up gpg config"
mkdir -p ~/.gnupg
gln -srf gnupg/gpg-agent.conf.symlink ~/.gnupg/gpg-agent.conf

pp_info "fzf" "setting up fzf"
$(brew --prefix)/opt/fzf/install

pp_info "nvim" "setting up environment"
dirlink nvim ~/.config/

pip install neovim
gem install neovim
yarn global add neovim

pp_info "nvim" "fixing C-h bug"
$DEV_DOTFILES/scripts/fix-nvim-c-h

pp_info "ctags" "installing elixir ctags"
wget https://raw.githubusercontent.com/mmorearty/elixir-ctags/master/.ctags -q -O ctags/elixir.ctags

pp_info "ctags" "setting up ctags environment"
dirlink ctags ~/.ctags.d

pp_info "luarocks" "setting up lua env"
cat lua/deps | xargs -I {} luarocks install --server=https://luarocks.org/dev {}

pp_info "bat" "installing custom theme"
mkdir -p "$(bat --config-dir)/themes/tranquility"
mkdir -p "$(bat --config-dir)/themes/mountaineer"
mkdir -p "$(bat --config-dir)/themes/dracula"
mkdir -p "$(bat --cache-dir)"
gln -sfr bat/tranquility.tmTheme "$(bat --config-dir)/themes/tranquility"
gln -sfr bat/tranquility_eighties.tmTheme "$(bat --config-dir)/themes/tranquility"
gln -sfr bat/mountaineer.tmTheme "$(bat --config-dir)/themes/mountaineer"

curl                                                                          \
    -o                                                                        \
    "$(bat --config-dir)/themes/dracula/dracula.tmTheme"                      \
    https://raw.githubusercontent.com/dracula/sublime/master/Dracula.tmTheme

for variant in frappe latte macchiato mocha; do
  mkdir -p "$(bat --config-dir)/themes/Catppuccin-$variant"

  curl                                                                                  \
    -o                                                                                  \
    "$(bat --config-dir)/themes/Catppuccin-$variant/Catppuccin-$variant.tmTheme"        \
    "https://raw.githubusercontent.com/catppuccin/bat/main/Catppuccin-$variant.tmTheme"
done

bat cache --build

pp_info "starship" "setting configs"
gln -srf starship/starship.toml.symlink ~/.config/starship.toml

pp_info "starship" "installing custom themes"
mkdir -p $DOTFILES/starship/themes/catppuccin/

for variant in frappe latte macchiato mocha; do
  curl                                                                                  \
    -o                                                                                  \
    "$DOTFILES/starship/themes/catppuccin/$variant"                                     \
    "https://raw.githubusercontent.com/catppuccin/starship/main/palettes/$variant.toml"
done

pp_info "kitty" "setting configs"
dirlink kitty ~/.config/kitty

pp_info "kitty" "installing custom themes"
for variant in Frappe Latte Macchiato Mocha; do
  kitty +kitten themes --dump-theme "Catppuccin-$variant" > "$DOTFILES/kitty/Catppuccin-$variant.conf"
done

pp_info "fonts" "installing fira code"

cd ~/Downloads
mkdir fonts
cd fonts

for type in Light Retina Regular Medium Bold SemiBold; do
  wget -O "FiraCode $type Nerd Font Complete Mono.ttf" "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/FiraCode/$type/FiraCodeNerdFontMono-$type.ttf?raw=true"
  wget -O "FiraCode $type Nerd Font Complete Mono.ttf" "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/FiraCode/$type/FiraCodeNerdFont-$type.ttf?raw=true"
done

mv ./*.ttf ~/Library/Fonts/
cd $WD

pp_info "gh" "installing gh extensions..."
cat gh/extensions | xargs -I {} gh extension install {}

pp_success "install" "automatic config done!"
